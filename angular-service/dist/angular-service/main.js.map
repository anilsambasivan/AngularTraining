{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/customer/customer.component.html","webpack:///./src/app/customer/customer.component.ts","webpack:///./src/app/reducers/index.ts","webpack:///./src/app/services/customer.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<app-customer></app-customer>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  title = 'angular-service';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule }    from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { CustomerComponent } from './customer/customer.component';\nimport { reducers, metaReducers } from './reducers';\n\nimport { StoreModule } from '@ngrx/store'; \nimport { CustomerReducer } from './customer.reducer';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CustomerComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    StoreModule.forRoot(reducers, {\n      metaReducers,\n      runtimeChecks: {\n        strictStateImmutability: true,\n        strictActionImmutability: true\n      }\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n","module.exports = \"<form [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <label>\\n    First Name:\\n    <input id=\\\"firstName\\\" name=\\\"firstName\\\" type=\\\"text\\\" formControlName=\\\"firstName\\\" required>\\n    <div *ngIf=\\\"getFormControl('firstName').invalid && (getFormControl('firstName').dirty || getFormControl('firstName').touched)\\\" class=\\\"alert alert-danger\\\">\\n      <div *ngIf=\\\"getFormControl('firstName').errors.required\\\">\\n        First Name is required.\\n      </div>\\n      <div *ngIf=\\\"getFormControl('firstName').errors.minlength\\\">\\n        First Name must be at least 4 characters long.\\n      </div>\\n    </div>\\n  </label>\\n  <label>\\n    Last Name:\\n    <input id=\\\"lastName\\\" name=\\\"lastName\\\" type=\\\"text\\\" formControlName=\\\"lastName\\\" required>\\n    <div *ngIf=\\\"getFormControl('lastName').invalid && (getFormControl('lastName').dirty || getFormControl('lastName').touched)\\\" class=\\\"alert alert-danger\\\">\\n      <div *ngIf=\\\"getFormControl('lastName').errors.required\\\">\\n        First Name is required.\\n      </div>\\n      <div *ngIf=\\\"getFormControl('lastName').errors.minlength\\\">\\n        First Name must be at least 4 characters long.\\n      </div>\\n    </div>\\n  </label>\\n\\n  <div formGroupName=\\\"address\\\">\\n    <h3>Address</h3>\\n    <label>\\n      Street:\\n      <input type=\\\"text\\\" formControlName=\\\"street\\\">\\n    </label>\\n    <label>\\n      City:\\n      <input type=\\\"text\\\" formControlName=\\\"city\\\">\\n    </label>\\n    <label>\\n      State:\\n      <input type=\\\"text\\\" formControlName=\\\"state\\\">\\n    </label>\\n    <label>\\n      Zip Code:\\n      <input type=\\\"text\\\" formControlName=\\\"zip\\\">\\n    </label>\\n  </div>\\n  \\n  <button type=\\\"submit\\\" [disabled]=\\\"!customerForm.valid\\\">Submit</button>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { CustomerService } from '../services/customer.service';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n})\nexport class CustomerComponent implements OnInit {\n  public customerForm = new FormGroup({\n    firstName: new FormControl('', Validators.required),\n    lastName: new FormControl('', Validators.required),\n    address: new FormGroup({\n      street: new FormControl(''),\n      city: new FormControl(''),\n      state: new FormControl(''),\n      zip: new FormControl('')\n    })\n  });\n\n  private latestId = 0;\n  constructor(private service: CustomerService) {\n  }\n\n  ngOnInit() {\n    this.service.getCustomers().subscribe((customers) => {\n      console.log(JSON.stringify(customers));\n      this.latestId = customers.length + 1;\n    });\n  }\n\n  public onSubmit(): void {\n    this.customerForm.value.id = this.latestId;\n    this.service.saveCustomer(this.customerForm.value).subscribe();\n    console.log(this.customerForm.value);\n    this.latestId = this.latestId + 1;\n  }\n\n  public getFormControl(name: string) {\n    return this.customerForm.get(name);\n  }\n}","import {\n  ActionReducer,\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\nimport { environment } from '../../environments/environment';\n\nexport interface State {\n\n}\n\nexport const reducers: ActionReducerMap<State> = {\n\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Customer } from '../model/customer.model';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CustomerService {\r\n\r\n    private customersUrl = 'http://localhost:3000/customers';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getCustomers(): Observable<Customer[]> {\r\n        return this.http.get<Customer[]>(this.customersUrl, httpOptions).pipe(\r\n            catchError(this.handleError<Customer[]>('getCustomers')));\r\n    }\r\n\r\n    saveCustomer(data: Customer): Observable<Customer> {\r\n        return this.http.post<Customer>(this.customersUrl, data, httpOptions).pipe(\r\n            catchError(this.handleError<Customer>('addCustomer')));\r\n    }\r\n\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n            console.error(error); // log to console instead\r\n            return of(result as T);\r\n        };\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}